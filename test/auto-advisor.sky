var name: char[100], pre: char[1000], grade: int, credit: int;
var sum_attempt: int, sum_complete: int, sum_remain: int, sum_grade: int;
var num_complete: int, num_remain: int;
var names_complete: char[10000], names_remain: char[10000];
var pres: char[100000];
var pre_name: char[100];

func check(st: int) -> bool {
    if (pres[st] == '\0') {
        return true;
    }
    var tmp_len: int, top: int, orr: int, andd: int;
    var stack: bool[5];
    tmp_len = 0;
    top = 0;
    orr = 0;
    andd = 0;
    var i: int, j: int, k: int;
    for i in [0, 1000, 1] {
        var ch: char;
        ch = pres[st + i];
        if (ch == ',' || ch == ';' || ch == '\0') {
            pre_name[tmp_len] = '\0';
            top = top + 1;
            stack[top] = false;
            for j in [0, num_complete, 1] {
                var flag: bool;
                flag = true;
                for k in [0, tmp_len + 1, 1] {
                    if (names_complete[j * 100 + k] != pre_name[k]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    stack[top] = true;
                    break;
                }
            }
            if (andd > 0) {
                stack[top - 1] = stack[top - 1] && stack[top];
                top = top - 1;
                andd = 0;
            }
            if (orr > 1) {
                stack[top - 1] = stack[top - 1] || stack[top];
                top = top - 1;
                orr = orr - 1;
            }
            if (ch == ',') {
                andd = andd + 1;
            }
            if (ch == ';') {
                orr = orr + 1;
            }
            if (ch == '\0') {
                if (orr > 0) {
                    stack[top - 1] = stack[top - 1] || stack[top];
                    top = top - 1;
                    orr = orr - 1;
                }
                break;
            }
        } else {
            pre_name[tmp_len] = ch;
            tmp_len = tmp_len + 1;
        }
    }
    return stack[1];
}

func main() -> int {
    var i: int, j: int;
    printf("!!@");
    while (1 > 0) {
        printf("!!@");
        var len: int, ch: char;
        var scanfRet:int, fuyi:int;
        scanfRet = scanf("%c", &ch);
        printf("!!@");
        printf("%c", ch);
        fuyi = -1;
        if (scanfRet == fuyi) { break; }
        if (ch == '\n') {
            scanfRet = scanf("%c", &ch);
            if (scanfRet == fuyi) { break; }
        }
        len = 0;
        while (ch != '|') {
            name[len] = ch;
            len = len + 1;
            scanf("%c", &ch);
        }
        //printf("%s@", name);
        scanf("%d|", &credit);
        len = 0;
        scanf("%c", &ch);
        while (ch != '|') {
            pre[len] = ch;
            len = len + 1;
            scanf("%c", &ch);
        }
        pre[len] = '\0';
        scanf("%c", &ch);
        grade = -1;
        if (ch == 'A') { grade = 4; }
        if (ch == 'B') { grade = 3; }
        if (ch == 'C') { grade = 2; }
        if (ch == 'D') { grade = 1; }
        if (ch == 'F') { grade = 0; }
        if (grade >= 0) {
            sum_grade = sum_grade + grade * credit;
            sum_attempt = sum_attempt + credit;
        }
        if (grade > 0) {
            for i in [0, 100, 1] {
                names_complete[num_complete * 100 + i] = name[i];
                if (name[i] == '\0') { break; }
            }
            sum_complete = sum_complete + credit;
            num_complete = num_complete + 1;
        } else {
            for i in [0, 1000, 1] {
                pres[num_remain * 1000 + i] = pre[i];
                if (pre[i] == '\0') { break; }
            }
            for i in [0, 100, 1] {
                names_remain[num_remain * 100 + i] = name[i];
                if (name[i] == '\0') { break; }
            }
            sum_remain = sum_remain + credit;
            num_remain = num_remain + 1;
        }
    }
    var GPA: double;
    if (sum_attempt == 0) {
        printf("GPA: 0.0@");
    } else {
        //GPA = sum_grade * 1.0 / sum_attempt;
        var aa: int, bb: int, cc: int;
        aa = sum_grade / sum_attempt;
        bb = (sum_grade % sum_attempt) * 10 / sum_attempt;
        cc = (sum_grade % sum_attempt) * 10 % sum_attempt;
        while (cc >= 10) { cc = cc / 10; }
        if (cc > 5) {
            bb = bb + 1;
            if (bb == 10) {
                aa = aa + 1;
                bb = 0;
            }
        }
        printf("GPA: %d.%d@", aa, bb);
    }
    //printf("GPA: %.1f@", GPA);
    printf("Hours Attempted: %d@", sum_attempt);
    printf("Hours Completed: %d@", sum_complete);
    printf("Credits Remaining: %d@", sum_remain);
    printf("@Possible Courses to Take Next@");
    var num: int;
    num = 0;
    for i in [0, num_remain, 1] {
        if (check(i * 1000)) {
            num = num + 1;
            printf("  ");
            for j in [0, 100, 1] {
                if (names_remain[i * 100 + j] == '\0') { break; }
                printf("%c", names_remain[i * 100 + j]);
            }
            printf("@");
        }
    }
    if (num == 0) {
        printf("  None - Congratulations!");
    }
    return 0;
}