var name: char[1000], pre: char[10000], grade: int, credit: int;
var sum_attempt: int, sum_complete: int, sum_remain: int, sum_grade: int;
var num_complete: int, num_remain: int;
var names_complete: char[10000], names_remain: char[10000];
var pres: char[100000];
var pre_name: char[1000];
var st_complete: int[10000], st_pres: int[10000], st_remain: int[10000];

func check(id: int) -> int {
    //printf("%d@", st);
    if (pres[st_pres[id]] == '\0') {
        return 1;
    }
    //printf("%d@", st);
    var tmp_len: int, top: int, orr: int, andd: int;
    var stack: int[5];
    tmp_len = 0;
    top = 0;
    orr = 0;
    andd = 0;
    var i: int, j: int, k: int;
    var flag: int;
    for i in [st_pres[id], st_pres[id+1], 1] {
        var ch: char;
        ch = pres[i];
        if (ch == ',' || ch == ';' || ch == '\0') {
            pre_name[tmp_len] = '\0';
            top = top + 1;
            stack[top] = 0;
            for j in [0, num_complete, 1] {
                flag = 1;
                for k in [st_complete[j], st_complete[j+1], 1] {
                    //printf("%c=?%c ", names_complete[k], pre_name[k - st_complete[j]]);
                    if (names_complete[k] != pre_name[k - st_complete[j]]) {
                        flag = 0;
                        break;
                    }
                }
                //printf("%d@", flag);
                if (flag == 1) {
                    //printf("%d", j);
                    stack[top] = 1;
                    break;
                }
            }
            if (andd > 0) {
                if (stack[top - 1] == 1 && stack[top] == 1) {
                    stack[top - 1] = 1;
                } else {
                    stack[top - 1] = 0;
                }
                top = top - 1;
                andd = 0;
            }
            if (orr > 1) {
                if (stack[top - 1] == 1 || stack[top] == 1) {
                    stack[top - 1] = 1;
                } else {
                    stack[top - 1] = 0;
                }
                top = top - 1;
                orr = orr - 1;
            }
            if (ch == ',') {
                andd = andd + 1;
            }
            if (ch == ';') {
                orr = orr + 1;
            }
            if (ch == '\0') {
                if (orr > 0) {
                    if (stack[top - 1] == 1 || stack[top] == 1) {
                        stack[top - 1] = 1;
                    } else {
                        stack[top - 1] = 0;
                    }
                    top = top - 1;
                    orr = orr - 1;
                }
                break;
            }
            tmp_len = 0;
        } else {
            pre_name[tmp_len] = ch;
            tmp_len = tmp_len + 1;
        }
    }
    return stack[1];
}

func main() -> int {
    var i: int, j: int;
    while (1 > 0) {
        var len_name: int, len_pre: int, ch: char;
        var scanfRet:int, fuyi:int;
        scanfRet = scanf("%c", &ch);
        fuyi = -1;
        if (scanfRet == fuyi) { break; }
        if (ch == '\n') {
            scanfRet = scanf("%c", &ch);
            if (scanfRet == fuyi) { break; }
        }
        len_name = 0;
        while (ch != '|') {
            name[len_name] = ch;
            len_name = len_name + 1;
            scanf("%c", &ch);
        }
        name[len_name] = '\0';
        scanf("%d|", &credit);
        len_pre = 0;
        scanf("%c", &ch);
        while (ch != '|') {
            pre[len_pre] = ch;
            len_pre = len_pre + 1;
            scanf("%c", &ch);
        }
        pre[len_pre] = '\0';
        scanf("%c", &ch);
        grade = -1;
        if (ch == 'A') { grade = 4; }
        if (ch == 'B') { grade = 3; }
        if (ch == 'C') { grade = 2; }
        if (ch == 'D') { grade = 1; }
        if (ch == 'F') { grade = 0; }
        if (grade >= 0) {
            sum_grade = sum_grade + grade * credit;
            sum_attempt = sum_attempt + credit;
        }
        var st: int;
        if (grade > 0) {
            st = st_complete[num_complete];
            for i in [st, st+len_name+1, 1] {
                names_complete[i] = name[i - st];
            }
            sum_complete = sum_complete + credit;
            num_complete = num_complete + 1;
            st_complete[num_complete] = st + len_name + 1;
        } else {
            st = st_pres[num_remain];
            for i in [st, st+len_pre+1, 1] {
                pres[i] = pre[i - st];
            }
            st_pres[num_remain+1] = st+len_pre+1;
            st = st_remain[num_remain];
            for i in [st, st+len_name+1, 1] {
                names_remain[i] = name[i - st];
            }
            st_remain[num_remain+1] = st+len_name+1;
            sum_remain = sum_remain + credit;
            num_remain = num_remain + 1;
        }
    }
    var GPA: double;
    if (sum_attempt == 0) {
        printf("GPA: 0.0@");
    } else {
        var aa: int, bb: int, cc: int;
        aa = sum_grade / sum_attempt;
        bb = (sum_grade % sum_attempt) * 10 / sum_attempt;
        cc = (sum_grade % sum_attempt) * 100 / sum_attempt - bb * 10;
        //printf("%d %d %d %d %d@", aa, bb, cc, sum_grade, sum_attempt);
        if (cc >= 5) {
            bb = bb + 1;
            if (bb == 10) {
                aa = aa + 1;
                bb = 0;
            }
        }
        printf("GPA: %d.%d@", aa, bb);
    }
    printf("Hours Attempted: %d@", sum_attempt);
    printf("Hours Completed: %d@", sum_complete);
    printf("Credits Remaining: %d@", sum_remain);
    printf("@Possible Courses to Take Next@");
    var num: int;
    num = 0;
    for i in [0, num_remain, 1] {
        if (check(i) == 1) {
            num = num + 1;
            printf("  ");
            for j in [st_remain[i], st_remain[i+1]-1, 1] {
                printf("%c", names_remain[j]);
            }
            printf("@");
        }
    }
    if (num == 0) {
        printf("  None - Congratulations!@");
    }
    return 0;
}